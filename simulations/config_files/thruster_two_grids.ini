name = 'thruster_two_grids'
directory = 'simulations/results/'

use_poisson = True
use_dsmc = True
use_fluxes = True
use_particles_initialization = False
use_reactions = True
use_monitoring = True
use_plotting = True
use_verbose = True

[simulation]
# in sec
time_step = 1e-7
iterations = 10000
# any integer of None if random
seed = 1111

    [[integration]]
    # I will receive euler explicit + default integration function
    # while I- will have RK4 with the given fn.
        [[[default]]] # available : species name given in the specices function
        # euler_explicit, rk4
        scheme = euler_explicit

        # function - default 
        fn = 'default'
            # [[[users_args]]]
                # args you may want to add to fn
        [[[I-]]]
            scheme = rk4

            # function
            fn = '''import numpy as np
def fn(arr, time, mass, charge, electric_field):
    der = np.zeros((arr.shape[0], 5))
    fact  = charge/mass
    for k, part in enumerate(arr):
        try:
            der[k,2:4] =  fact * electric_field(part[:2])
        except Exception as e:
            pass
        der[:,:2] = arr[:,2:4]
    return der'''

[monitoring]
period_saving = 100
period_adding = 10

[plotting]
period = 100

[verbose]
period = 100

[system]
dz = 0.001
    [[points]]
    # will be taken alphabetically (p1, then p2 then p3 then p4 etc.)
    # will form the wall : p1-p2, p2-p3, p3-p4, p4-p1 in this order
    p1 = 0,0
    p2 = 0,0.005
    p3 = 0.003,0.005
    p4 = 0.003,0.004
    p5 = 0.004,0.004
    p6 = 0.004,0.005
    p7 = 0.005,0.005
    p8 = 0.005,0.003
    p9 = 0.015,0.003
    p10 = 0.015,0.005
    p11 = 0.016,0.005
    p12 = 0.016,0
    p13 = 0.015,0
    p14 = 0.015,0.002
    p15 = 0.005,0.002
    p16 = 0.005,0
    p17 = 0.004,0
    p18 = 0.004,0.001
    p19 = 0.003,0.001
    p20 = 0.003,0
    # as many as you want
    # clockwise

    [[reflect_fns]]
        # [[[default]]] # species
        #    reflect_fn = 'specular' # to begin with
        # [[[default]]]
        #     reflect_fn = 'diffusive'
        #     generic_args = 'cp', 'ct', 'normal_vectors', 'mass'
        #     [[[[args]]]]
        #         temperature = 300 # temperature of the walls
            
        [[[default]]] # NOTE : ideally we would make it diffusive for lowest energy and specular + energy loss for higher energies.
            reflect_fn = '''import numpy as np
def reflect_fn(arr, **kwargs):
    # copy paste of the default specular function
    a, ct, cp = kwargs['directing_vectors'], kwargs['ct'], kwargs['cp']
    k1, k2 = 2*a[:,0]**2-1, 2*a[:,0]*a[:, 1] # 2*ctheta**2-1, 2*ctheta*stheta

    # velocity after the collision
    arr[:,2] = arr[:,2]*k1+ arr[:,3]*k2   # i.e. : vx = vx*k1+vy*k2
    arr[:,3] = - arr[:,3]*k1+arr[:,2]*k2  # i.e. : vy = -vy*k1+vx*k2

    # we simply add a loss of energy in the end
    arr[:,2:] = np.sqrt(kwargs['energy_remain']) * arr[:,2:]

    # new position
    arr[:,0] = cp[:,0]+ct*arr[:,2] # new x pos 
    arr[:,1] = cp[:,1]+ct*arr[:,3] # new y pos

    return arr'''
            generic_args = 'cp', 'ct', 'directing_vectors'
            [[[[args]]]]
                energy_remain = 0.9

    [[out_boundaries]]
    # list of indexes of the boundaries. Note : p1-p2 is the boundary 0, p2-p3 is 1, etc. plast-pfirst is thus boundary *last*, 
    out_boundaries = 0,9,10,11

    [[poisson_solver]]
    # refined_mesh : not yet available
    mesh_resolution = 100
    # boundary_conditions, written in C++, gives a python dictionnary the charge as a function of x and y
        [[[boundary_conditions]]]
                [[[[inflow_area]]]]
                    type = 'Dirichlet'
                    solution = '0'
                    degree = 0
                    boundary = 'on_boundary && near(x[0], x_in, tol)'
                    [[[[[solution_kwargs]]]]]
                    [[[[[boundary_kwargs]]]]]
                        tol = 1e-14
                        x_in = 0
                [[[[electrode_1]]]]
                    type = 'Dirichlet'
                    solution = '30'
                    degree = 0
                    boundary = 'on_boundary && x[0] > x_electrode_1 - tol && x[0] < x_inter_electrodes_area + tol'
                    [[[[[solution_kwargs]]]]]
                    [[[[[boundary_kwargs]]]]]
                        tol = 1e-14
                        x_electrode_1 = 0.003
                        x_inter_electrodes_area = 0.004
                [[[[electrode_2]]]]
                    type = 'Dirichlet'
                    solution = '300'
                    degree = 0
                    boundary = 'on_boundary && x[0] > x_electrode_2 - tol && x[0] < x_out + tol'
                    [[[[[solution_kwargs]]]]]
                    [[[[[boundary_kwargs]]]]]
                        tol = 1e-14
                        x_electrode_2 = 0.005
                        x_out = 0.015
        [[[charge_density]]]
        value = '0'
        degree = 0
            [[[[kwargs]]]]
        
        # if you want to add one ...
        # [[[charge_density]]]
        # value = '-q*n0*(1-x[0]/l)',  # must be a string too
        # degree =  2
        #     [[[kwargs]]]
        #     n0 = 1e17,
        #     l  = 0.016,
        #     q  = 1.6e-19,
            
[dsmc]
use_same_mass = True # approximation
    [[mean_number_per_cell]]
        [[[I]]]
        mean_number_per_cell = 1000
        [[[I-]]]
        mean_number_per_cell = 10
    [[grid]]
    max_size = 2000
    resolutions = 16, 5
    # Note : in practice, the thruster is composed of a sparsed grid, there are 38 cells (for a resolution of 16x5) in the 2-grids thruster

[species]
# as many as you want
# following fields must be given :
# density, charge, mass, radius
# m-3, C, kg, m
    [[list]]
        [[[I]]]
        density = 3.2e19
        charge = 0
        mass = 216e-27
        radius = 2e-10
        [[[I-]]]
        density = 3.2e17
        charge = -1.6e-19
        mass = 216e-27
        radius = 2e-10 

[fluxes]
# for each particle 
# points of the in-segment should be given in clockwise order relatively to inside area of the system.
pi1 = 0,0
pi2 = 0,0.005
    [[species]]
        [[[I]]]
        temperature = 300
        drift = 0
        density = 3.2e19
        [[[I-]]]
        temperature = 2000
        drift = 0
        density = 3.2e17

[reactions]
boundaries = 'I- : I',
    [[proba]]
        [[[I-]]]
        # proba_fn must return the indexes for each collision of the reactions to consider. Note: 0 is no reaction. 
        # Then it is given in the order given in *boundaries*
        # probability is in this case '1' to convert from I- to I
        proba_fn = '''import numpy as np
def proba_fn(size):
    return np.full(shape = size, fill_value = 1, dtype = int)'''