name = string(default = 'simu_001')
directory = string(default = '')

use_poisson = boolean(default = False)
use_dsmc = boolean(default = False)
use_background_gas = boolean(default = False)
use_fluxes = boolean(default = False)
use_particles_initialization = boolean(default = False)
use_reactions =  boolean(default = False)
use_monitoring =  boolean(default = False)
use_plotting = boolean(default = False)
use_verbose = boolean(default = False)

[simulation]
# in sec
time_step = float(default = 1e-7)
iterations = integer(default = 1000)
# any integer of None if random
seed = integer(min = 0, default = None)

    [[integration]]
        [[[default]]]
            # scheme - ex : euler_explicit, rk4
            scheme = string(default = 'euler_explicit')
            # integration functions
            fn = fn(default = 'default')
                [[[[users_args]]]]
                __many__ = float
        [[[__many__]]]
            # scheme - ex : euler_explicit, rk4
            scheme = string
            # integration functions
            fn = fn()
               [[[[users_args]]]]
               __many__ = float

[monitoring]
period_saving = integer(min = 1, default = 100)
period_adding = integer(min = 1, default = 10)
offset = integer(min = 0, default = 0)

[plotting]
period = integer(min = 1, default = 100)
plot_distribution = boolean(default = False)

[verbose]
period = integer(min = 1, default = 1)

[system]
dz = float(min = 0.0, default = 1e-3)
# offsets = float_list(min = 2, max = 2, default = list(0.,0.))
    [[points]]
    __many__ = float_list(min = 2, max = 2, default = None)
    # as many as you want
    # clockwise
    [[reflect_fns]]
        [[[default]]] # for remaining species
        reflect_fn = reflect_fn(default = 'specular') # couette, diffusive
        # available : cp, ct, index_walls, directing_vectors, normal_vectors, mass
        generic_args = string_list(default = list('directing_vectors','ct','cp')) 
            [[[[args]]]]
            __many__ = float
        [[[__many__]]] # species
        reflect_fn = reflect_fn()
        generic_args = string_list() 
            [[[[args]]]]
            __many__ = float

    [[out_boundaries]]
    out_boundaries = int_list(min = 0, default = list())

    [[poisson_solver]]
    # refined_mesh : not yet available
    mesh_resolution = integer(min = 1, default = 100)

    # boundary_conditions, written in C++, gives a python dictionnary the charge as a function of x and y
        [[[boundary_conditions]]]
                [[[[__many__]]]]
                    type = string
                    solution = string
                    degree = integer
                    boundary = string
                    [[[[[solution_kwargs]]]]]
                        __many__ = float
                    [[[[[boundary_kwargs]]]]]
                        __many__ = float

        [[[charge_density]]]
        value = string(default = '0')
        degree = integer(default = 0)
            [[[[kwargs]]]]
                __many__ = float

[dsmc]
# using same mass can speed up the process
# can be used for particles of close mass
use_collisions = boolean(default = True)
use_same_mass = boolean(default = True)
    [[mean_number_per_cell]]
        [[[__many__]]]
            mean_number_per_cell = integer(min = 1, default = 200)
    [[grid]]
    max_size = integer(min = 1, default = 1000)
    resolutions = int_list(min = 2, max = 2, default = list(3,3))

[background_gas] # monoatomic for now
gas_mass = float(min = 0., default = 0.)
gas_radius = float(min = 0., default = 0.)
gas_density_arr = Path(default = '')
gas_dynamic_arr = dynamic_background_gas(default = 'None')
x_arr = Path(default = '')
y_arr = Path(default = '')

[species]
# as many as you want
# following fields must be given :
# density, charge, mass, radius
# m-3, C, kg, m
    [[list]]
        [[[__many__]]]
        density = float(min = 0.)
        charge = float
        mass = float(min = 0.)
        radius = float(min = 0.)

    # to choose an initialization of the particles
    [[initialization]] 
    species = string_list(default = list()) 
    types = string_list(default = list())
        [[[params]]]
        __many__ = float_list(default = list())


[fluxes]
# for each particle
# points of the in-segment should be given in clockwise order relatively to inside area of the system.
pi1 = float_list(min = 2, max = 2, default = list(0.,0.))
pi2 = float_list(min = 2, max = 2, default = list(0.,1.))

    [[species]]
        [[[__many__]]]
        density = float(min = 0.)
        temperature = float(min = 0.)
        drift = float

[reactions]
boundaries = string_list(default = list())
    [[proba]]
        # proba_fn must return the indexes for each collision of the reactions to consider. Note: 0 is no reaction. 
        # Then it is given in the order given in *boundaries*
        [[[__many__]]]
        proba_fn = proba_fn