name = 'example'
# TODO : check that this indeed works.
directory = 'results/cfg_tests/'

use_poisson = True
use_dsmc = True
use_fluxes = True
use_reactions = True
use_monitoring = True

[simulation]
# in sec
time_step = 2e-6
iterations = 500
# any integer of None if random
seed = 1111

    [[integration]] 
        [[[default]]] # available : species name given in the specices function
            # euler_explicit, rk4
            scheme = rk4

            # function
            fn = '''import numpy as np
def fn(arr, time, mass, charge, electric_field):
    der = np.zeros((arr.shape[0], 5))
    fact  = charge/mass
    for k, part in enumerate(arr):
        try:
            der[k,2:4] =  fact * electric_field(part[:2])
        except Exception as e:
            pass
        der[:,:2] = arr[:,2:4]
    return der'''
                # [[[users_args]]]
                    # args you may want to add to fn

[monitoring]
period_saving = 100
period_adding = 10

[system]
dz = 0.001
    [[points]]
    # will be taken alphabetically (p1, then p2 then p3 then p4 etc.)
    # will forme the wall : p1-p2, p2-p3, p3-p4, p4-p1 in this order
    p1 = 0,0
    p2 = 0,1
    p3 = 1,1
    p4 = 1,0
    # as many as you want
    # clockwise
    
    [[out_boundaries]]
    # list of indexes of the boundaries. Note : p1-p2 is the boundary 1, p2-p3 is 2, etc. plast-pfirst is thus boundary *last*, 
    out_boundaries = 0,2

    [[poisson_solver]]
    # refined_mesh : not yet available
    mesh_resolution = 100
    # boundary_conditions, written in C++, gives a python dictionnary the charge as a function of x and y
        [[[boundary_conditions]]]
                [[[[top]]]]
                    type = 'Dirichlet'
                    solution = '30'
                    degree = 0
                    boundary = 'on_boundary && near(x[1], 1, tol)'
                    [[[[[solution_kwargs]]]]]
                    [[[[[boundary_kwargs]]]]]
                        tol = 1e-14
                [[[[bottom]]]]
                    type = 'Dirichlet'
                    solution = '-30'
                    degree = 0
                    boundary = 'on_boundary && near(x[1], 0, tol)'
                    [[[[[solution_kwargs]]]]]
                    [[[[[boundary_kwargs]]]]]
                        tol = 1e-14
        [[[charge_density]]]
        value = '0'
        degree = 0
            [[[[kwargs]]]]

[dsmc]
# as much as there is species (and in the right order)
    [[mean_number_per_cell]]
        [[[I]]]
        mean_number_per_cell = 1000
        [[[I2]]]
        # https://fr.wikipedia.org/wiki/Diiode
        mean_number_per_cell = 1000
        [[[I-]]]
        mean_number_per_cell = 9
        [[[I+]]]
        mean_number_per_cell = 10
        [[[e-]]]
        mean_number_per_cell = 1
    [[grid]]
    max_size = 10000
    resolutions = 3,3

[species]
# as many as you want
# following fields must be given :
# density, charge, mass, radius
# m-3, C, kg, m
    [[list]]
        [[[I]]]
        density = 1.6e19
        charge = 0
        mass = 216e-27
        radius = 2e-10 
        [[[I2]]]
        # https://fr.wikipedia.org/wiki/Diiode
        density = 1.6e19
        charge = 0
        mass = 432e-27
        radius = 2.66e-10 
        [[[I-]]]
        density = 1.44e17
        charge = -1.6e-19
        mass = 216e-27
        radius = 2e-10 
        [[[I+]]]
        density = 1.6e17
        charge = 1.6e-19
        mass = 216e-27
        radius = 2e-10 
        [[[e-]]]
        density = 0.16e17
        charge = -1.6e-19
        mass = 9e-31
        radius = 2.8e-15

[fluxes]
# for each particle 
# points of the in-segment should be given in clockwise order relatively to inside area of the system.
pi1 = 0,0
pi2 = 0,1
    [[species]]
        [[[I]]]
        temperature = 300
        drift = 0
        [[[I2]]]
        temperature = 300
        drift = 0
        [[[I-]]]
        temperature = 1000
        drift = 2000
        [[[I+]]]
        temperature = 1000
        drift = 2000


[reactions]
# list of reactions
boundaries = 'I- : I', 'I+ : I'
# particles = # not yet available
